From acf82fb2a9ceae94a3173bfa5a20adcbb7733eae Mon Sep 17 00:00:00 2001
From: l1ttleO <l1ttleofficial@outlook.com>
Date: Mon, 27 Jun 2022 17:16:21 +0500
Subject: [PATCH] Add modifiers 'Damage from Opponent Notes' and 'Opponent Notes Can Kill'

---
 source/ClientPrefs.hx               | 13 +++++++++++++
 source/PlayState.hx                 |  6 ++++++
 source/options/ModifiersSubState.hx | 20 ++++++++++++++++++++
 3 files changed, 39 insertions(+)

diff --git a/source/ClientPrefs.hx b/source/ClientPrefs.hx
index 117cca4..f2d6429 100644
--- a/source/ClientPrefs.hx
+++ b/source/ClientPrefs.hx
@@ -60,6 +60,10 @@ class ClientPrefs {
 	public static var badWindow:Int = 135;
 	public static var safeFrames:Float = 10;
 
+	// ProjectFNF
+	public static var damageFromOpponentNotes:Float = 0;
+	public static var opponentNotesCanKill:Bool = false;
+
 	//Every key has two binds, add your key bind down here and then add your control on options/ControlsSubState.hx and Controls.hx
 	public static var keyBinds:Map<String, Array<FlxKey>> = [
 		//Key Bind, Name for ControlsSubState
@@ -128,6 +132,9 @@ class ClientPrefs {
 		FlxG.save.data.hitsoundVolume = hitsoundVolume;
 		FlxG.save.data.pauseMusic = pauseMusic;
 		FlxG.save.data.checkForUpdates = checkForUpdates;
+
+		FlxG.save.data.damageFromOpponentNotes = damageFromOpponentNotes;
+		FlxG.save.data.opponentNotesCanKill = opponentNotesCanKill;
 	
 		FlxG.save.flush();
 
@@ -245,6 +252,12 @@ class ClientPrefs {
 				gameplaySettings.set(name, value);
 			}
 		}
+		if(FlxG.save.data.damageFromOpponentNotes != null) {
+			damageFromOpponentNotes = FlxG.save.data.damageFromOpponentNotes;
+		}
+		if(FlxG.save.data.opponentNotesCanKill != null) {
+			opponentNotesCanKill = FlxG.save.data.opponentNotesCanKill;
+		}
 		
 		// flixel automatically saves your volume!
 		if(FlxG.save.data.volume != null)
diff --git a/source/PlayState.hx b/source/PlayState.hx
index e64822e..2d2865e 100644
--- a/source/PlayState.hx
+++ b/source/PlayState.hx
@@ -162,6 +162,7 @@ class PlayState extends MusicBeatState
 
 	public var gfSpeed:Int = 1;
 	public var health:Float = 1;
+	public var healthDrained:Float = 1;
 	public var combo:Int = 0;
 
 	private var healthBarBG:AttachedSprite;
@@ -4436,6 +4437,10 @@ class PlayState extends MusicBeatState
 		StrumPlayAnim(true, Std.int(Math.abs(note.noteData)) % 4, time);
 		note.hitByOpponent = true;
 
+		var damage:Float = ClientPrefs.damageFromOpponentNotes * 0.02;
+		var toRemove:Float = Math.min(damage, ClientPrefs.opponentNotesCanKill && healthDrained + damage < 1.8 ? 0.2 : Math.max(0.001, health) - 0.001);
+		health -= toRemove;
+		healthDrained += toRemove;
 		callOnLuas('opponentNoteHit', [notes.members.indexOf(note), Math.abs(note.noteData), note.noteType, note.isSustainNote]);
 
 		if (!note.isSustainNote)
@@ -4491,6 +4496,7 @@ class PlayState extends MusicBeatState
 				popUpScore(note);
 			}
 			health += note.hitHealth * healthGain;
+			healthDrained -= note.hitHealth * healthGain;
 
 			if(!note.noAnimation) {
 				var animToPlay:String = singAnimations[Std.int(Math.abs(note.noteData))];
diff --git a/source/options/ModifiersSubState.hx b/source/options/ModifiersSubState.hx
index 4b0d115..25ee861 100644
--- a/source/options/ModifiersSubState.hx
+++ b/source/options/ModifiersSubState.hx
@@ -15,6 +15,26 @@ class ModifiersSubState extends BaseOptionsMenu
 		//	false); // Default value
 		//addOption(option);
 
+		var option:Option = new Option('Damage from Opponent Notes', // Name
+			'How much health will the opponent reduce by hitting a note', // Description
+			'damageFromOpponentNotes', // Save data variable name
+			'float', // Variable type
+			0); // Default value
+		option.displayFormat = "%v%";
+		option.scrollSpeed = 3.3;
+		option.minValue = 0.0;
+		option.maxValue = 10.0;
+		option.changeValue = 0.1;
+		option.decimals = 1;
+		addOption(option);
+
+		var option:Option = new Option('Opponent Notes Can Kill', // Name
+			'If checked, damage from opponent notes can be lethal.', // Description
+			'opponentNotesCanKill', // Save data variable name
+			'bool', // Variable type
+			false); // Default value
+		addOption(option);
+
 		super();
 	}
 }
-- 
2.34.1.windows.1

